import streamlit as st
import pandas as pd
from openai import OpenAI
import os
import traceback
import re

# Configurar a API da OpenAI
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# Carregar os dados da planilha
@st.cache_data
def carregar_dados():
    df = pd.read_excel("dadosprogene.xlsx")
    df['Prova'] = df['Prova'].replace({"F.O.": "Freio de Ouro", "MORF": "Morfologia"})
    return df

# Carregar dataframe
df = carregar_dados()

# T√≠tulo da aplica√ß√£o
st.title("ü§ñ Consulta Bot - Gen√©tica Crioula (Intelig√™ncia Livre)")

# Exemplos de perguntas
st.sidebar.title("üîç Exemplos de Perguntas")
st.sidebar.markdown("- Qual o pai com maior n√∫mero de filhos domingueiros?")
st.sidebar.markdown("- Quais as linhas maternas mais repetidas na Morfologia?")
st.sidebar.markdown("- Quem foi o campe√£o da Morfologia em 2023?")
st.sidebar.markdown("- Qual a m√©dia da nota Final dos machos no Freio de Ouro?")

# Entrada de pergunta
pergunta = st.text_input("Digite sua pergunta sobre os dados:")

# Fun√ß√£o para gerar c√≥digo com base na pergunta
def gerar_codigo_analise(pergunta):
    prompt = f"""
    Voc√™ √© um analista de dados especializado em cavalos da ra√ßa Crioula.
    Com base na pergunta abaixo, escreva um c√≥digo Python usando pandas
    para analisar um DataFrame chamado df que cont√©m dados da planilha.

    Pergunta: {pergunta}

    Forne√ßa apenas o c√≥digo. N√£o inclua explica√ß√µes, nem tags markdown, nem a palavra 'python'.
    """
    try:
        resposta = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "Voc√™ √© um gerador de c√≥digo pandas que responde apenas com c√≥digo."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.2
        )
        # Limpar marca√ß√µes de bloco de c√≥digo e a keyword python
        codigo_bruto = resposta.choices[0].message.content
        # Remover backticks e tags de linguagem
        codigo_limpo = re.sub(r"```[a-zA-Z]*", "", codigo_bruto)
        lines = codigo_limpo.splitlines()
        filtered = [l for l in lines if l.strip() and not l.strip().lower().startswith('python') and not l.strip().startswith('```')]
        return "\n".join(filtered)
    except Exception as e:
        return f"# ERRO: {e}"

# Fun√ß√£o para executar o c√≥digo gerado
def executar_codigo(codigo, dados):
    try:
        local_vars = {"df": dados.copy()}
        exec(codigo, {}, local_vars)
        for var_name, var_value in local_vars.items():
            if isinstance(var_value, (pd.Series, pd.DataFrame)):
                return var_value.to_markdown()
        return "C√≥digo executado, mas nenhum DataFrame ou Series foi retornado."
    except Exception:
        return "Erro na execu√ß√£o do c√≥digo:\n" + traceback.format_exc()

# Fluxo principal
if pergunta:
    with st.spinner("Gerando an√°lise baseada em IA..."):
        codigo = gerar_codigo_analise(pergunta)
        resultado = executar_codigo(codigo, df)
        st.markdown("### Resultado da An√°lise:")
        st.markdown(f"<div style=\"user-select: none; -webkit-user-select: none; -moz-user-select: none;\">{resultado}</div>", unsafe_allow_html=True)
